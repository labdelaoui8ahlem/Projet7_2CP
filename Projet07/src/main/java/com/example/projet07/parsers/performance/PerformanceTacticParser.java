package com.example.projet07.parsers.performance;
/* PerformanceTacticParser.java */
/* Generated By:JavaCC: Do not edit this line. PerformanceTacticParser.java */
import com.example.projet07.parsers.shared.*;

import java.io.InputStreamReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class PerformanceTacticParser implements PerformanceTacticParserConstants {

    private InputStreamReader inputReader;
    public boolean tacticFound;
    public boolean CorrectSyntax;
    public List<String> occurrenceStrings = new ArrayList<>();

    //Call class that saves caller method and callee of each method
    private static class CallRelationship {
        String caller;
        String callee;
        String method;

        public CallRelationship(String caller, String callee, String method) {
            this.caller = caller;
            this.callee = callee;
            this.method = method;
        }


        public boolean isSelfCall() {
            return caller.equals(callee);
        }
    }

    //Occurrence list that saves all entities, start and pattern of each occurrence of the tactic
    public static class Occurrence {
        String ClientEntity;
        String MgrEntity;
        String CacheEntity;
        String RepoEntity;
        int startPosition;
        List<CallRelationship> PatternCalls;

        public Occurrence( String ClientEntity, String MgrEntity, String CacheEntity, String RepoEntity, int startPosition, List<CallRelationship> PatternCalls) {
            this.ClientEntity = ClientEntity;
            this.MgrEntity = MgrEntity;
            this.CacheEntity = CacheEntity;
            this.RepoEntity = RepoEntity;
            this.startPosition = startPosition;
            this.PatternCalls = new ArrayList<>(PatternCalls);

        }

        public Occurrence( String ClientEntity, String MgrEntity, String CacheEntity, int startPosition, List<CallRelationship> PatternCalls) {
            this.ClientEntity = ClientEntity;
            this.MgrEntity = MgrEntity;
            this.CacheEntity = CacheEntity;
            this.startPosition = startPosition;
            this.PatternCalls = new ArrayList<>(PatternCalls);

        }
    }

    // State machine for pattern matching
    private enum State {
        LOOKING_FOR_REQUEST_CALL,
        LOOKING_FOR_LOOKUP_CALL,
        LOOKING_FOR_OPTIONAL_LOOKUP_CALL,
        LOOKING_FOR_OPTIONAL_UPDATE_CALL,
        PATTERN_FOUND
    }


    // List to store all call relationships from the trace file
    private static List<CallRelationship> callRelationships = new ArrayList<>();

    //List to store the infos of each detected Occurrence
    public static List<Occurrence> TotalOccurrences = new ArrayList<>();

    //constructor
    public PerformanceTacticParser(InputStream input) {
        callRelationships.clear();
        this.inputReader = new InputStreamReader(input);
        ReInit(this.inputReader);
        try {
            ExecutionTrace();
            CorrectSyntax = true;
        } catch (ParseException e){
            CorrectSyntax = false;
        }
    }


    private static void detectPerformanceTactic() {
        // Use a state machine approach for pattern matching
        State currentState = State.LOOKING_FOR_REQUEST_CALL;
        String ClientEntity = null;
        String MgrEntity = null;
        String CacheEntity = null;
        String RepoEntity = null;
        int startPosition = 0;
        int potentialStart = 0;
        boolean opt = false;

        List<CallRelationship> patternCalls = new ArrayList<>();
        CallRelationship opCall = null;

        for (int i = 0; i < callRelationships.size(); i++) {
            CallRelationship call = callRelationships.get(i);

            switch (currentState) {
                case LOOKING_FOR_REQUEST_CALL:
                    // Step 1:recording caller and callee for future checking
                    if (!call.isSelfCall()) {
                        ClientEntity = call.caller;
                        MgrEntity = call.callee;
                        startPosition = i;
                        patternCalls.clear();
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_LOOKUP_CALL;
                    }

                    break;

                case LOOKING_FOR_LOOKUP_CALL:
                    // Step 2: checking if caller-callee relationship is satisfied with the first method
                    if (call.caller.equals(MgrEntity) && !call.callee.equals(ClientEntity) && !call.isSelfCall()) {
                        CacheEntity = call.callee;
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_OPTIONAL_LOOKUP_CALL;
                    } else {
                        // broken pattern, looking for first request call again
                        i = startPosition;
                        currentState = State.LOOKING_FOR_REQUEST_CALL;
                    }
                    if (i == callRelationships.size()-1) {
                        TotalOccurrences.add(new Occurrence(ClientEntity, MgrEntity, CacheEntity, startPosition, patternCalls));
                    }
                    break;

                case LOOKING_FOR_OPTIONAL_LOOKUP_CALL:
                    // Step 3: Look for optional block
                    potentialStart = i;
                    if (call.caller.equals(MgrEntity) && !call.isSelfCall() && !call.callee.equals(ClientEntity) && !call.callee.equals(CacheEntity)){
                        RepoEntity = call.callee;
                        opCall = call;
                        patternCalls.add(opCall);
                        currentState = State.LOOKING_FOR_OPTIONAL_UPDATE_CALL;
                    } else {
                        // necessary block still found, pattern detected
                        TotalOccurrences.add(new Occurrence(ClientEntity, MgrEntity, CacheEntity, startPosition, patternCalls));
                        currentState = State.LOOKING_FOR_REQUEST_CALL;
                        i = --potentialStart;
                    }
                    break;

                case LOOKING_FOR_OPTIONAL_UPDATE_CALL:
                    // Step 4: Look for last potential method call
                    currentState = State.PATTERN_FOUND;
                    if (call.caller.equals(MgrEntity) && call.callee.equals(CacheEntity)) {
                        patternCalls.add(call);
                        --i;
                    } else {
                        // necessary block still found, pattern detected
                        patternCalls.remove(opCall);
                        TotalOccurrences.add(new Occurrence(ClientEntity, MgrEntity, CacheEntity, startPosition, patternCalls));
                        currentState = State.LOOKING_FOR_REQUEST_CALL;
                        i = --potentialStart;
                    }
                    break;

                case PATTERN_FOUND:
                    //opt block was found
                    TotalOccurrences.add(new Occurrence(ClientEntity, MgrEntity, CacheEntity, RepoEntity, startPosition, patternCalls));
                    currentState = State.LOOKING_FOR_REQUEST_CALL;
                    break;
            }
        }
    }


    public void buildPrintedContent() {

        // Iterate over the occurrences and add details to the string
        for (int i = 0; i < TotalOccurrences.size(); i++) {
            StringBuilder contentBuilder = new StringBuilder();
            Occurrence occ = TotalOccurrences.get(i);
            contentBuilder.append("Client Entity: ").append(occ.ClientEntity).append("\n");
            contentBuilder.append("CacheMgr Entity: ").append(occ.MgrEntity).append("\n");
            contentBuilder.append("Cache Entity: ").append(occ.CacheEntity).append("\n");
            contentBuilder.append("Repository Entity: ").append(occ.RepoEntity).append("\n");

            int line = occ.startPosition;
            contentBuilder.append("\nStarting line ").append(++line).append("\n\n");

            for (CallRelationship call : occ.PatternCalls) {
                contentBuilder.append(line).append(" CALLER:").append(call.caller).append(",METHOD:").append(call.method).append(",CALLEE:").append(call.callee).append(";\n");
                line++;
            }
            occurrenceStrings.add(contentBuilder.toString());
        }
    }

    public void parse() {
        TotalOccurrences.clear();
        occurrenceStrings.clear();
        try {
            detectPerformanceTactic();
            if (!TotalOccurrences.isEmpty()) {
                tacticFound = true;
                buildPrintedContent();
            } else {
                tacticFound = false;
            }
        } catch (Exception e) {
            tacticFound = false;
        }
    }

    final public void ExecutionTrace() throws ParseException {
        label_1:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case CALLER:{
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            CallStatement();
        }
        jj_consume_token(0);
    }

    final public void CallStatement() throws ParseException {Token caller, method, callee;
        jj_consume_token(CALLER);
        caller = jj_consume_token(LITERAL);
        jj_consume_token(COMMA);
        jj_consume_token(METHOD);
        method = jj_consume_token(LITERAL);
        jj_consume_token(COMMA);
        jj_consume_token(CALLEE);
        callee = jj_consume_token(LITERAL);
        jj_consume_token(SEMICOLON);
//storing caller, method and callee of each line
        callRelationships.add(new CallRelationship(caller.image, callee.image, method.image));
    }

    /** Generated Token Manager. */
    public PerformanceTacticParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[1];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x40,};
    }


    /** Constructor with InputStream and supplied encoding */
    public PerformanceTacticParser(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new PerformanceTacticParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public PerformanceTacticParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PerformanceTacticParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new PerformanceTacticParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public PerformanceTacticParser(PerformanceTacticParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(PerformanceTacticParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 1; i++) jj_la1[i] = -1;
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[11];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 1; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 11; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private boolean trace_enabled;

    /** Trace enabled. */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

}