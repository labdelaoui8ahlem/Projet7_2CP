options {
  static = true;
}

PARSER_BEGIN(AvailabilityTacticParser)
import java.io.InputStreamReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.text.ParseException;

public class AvailabilityTacticParser {
  
  	private InputStreamReader inputReader; 
  	public boolean tacticFound;
  	public boolean CorrectSyntax;
  	public List<String> occurrenceStrings = new ArrayList<>();

   //Call class that saves caller method and callee of each method
  	private static class CallRelationship {
        String caller;
        String callee;
        String method;
        
        public CallRelationship(String caller, String callee, String method) {
            this.caller = caller;
            this.callee = callee;
            this.method = method;
        }
        
        
        public boolean isSelfCall() {
            return caller.equals(callee);
        }
    }

    //Occurrence list that saves all entities, start and pattern of each occurrence of the tactic    
     public static class Occurrence {
          String SenderEntity;
          String ReceiverEntity;
          String MonitorEntity;
          int startPosition;
          List<CallRelationship> PatternCalls;

          public Occurrence( String SenderEntity, String ReceiverEntity, int startPosition, List<CallRelationship> PatternCalls) {
               this.SenderEntity = SenderEntity;
               this.ReceiverEntity = ReceiverEntity;
               this.startPosition = startPosition;
               this.PatternCalls = new ArrayList<>(PatternCalls);
               
          }

          public Occurrence( String SenderEntity, String ReceiverEntity, String MonitorEntity, int startPosition, List<CallRelationship> PatternCalls) {
               this.SenderEntity = SenderEntity;
               this.ReceiverEntity = ReceiverEntity;
               this.MonitorEntity = MonitorEntity;
               this.startPosition = startPosition;
               this.PatternCalls = new ArrayList<>(PatternCalls);
               
          }

          
     }


     // State machine for pattern matching
    private enum State {
        LOOKING_FOR_PING_CALL,
        LOOKING_FOR_OPTIONAL_NOTIFY_CALL,
        LOOKING_FOR_OPTIONAL_HANDLE_CALL,
        LOOKING_FOR_ECHO_CALL,
        LOOKING_FOR_ITERATION_PING_CALL,
        LOOKING_FOR_ITERATION_OPTIONAL_NOTIFY_CALL,
        LOOKING_FOR_ITERATION_OPTIONAL_HANDLE_CALL,
        LOOKING_FOR_ITERATION_ECHO_CALL,
        PATTERN_FOUND
    }
    
    // List to store all call relationships from the trace file
    private static List<CallRelationship> callRelationships = new ArrayList<>();

    //List to store the infos of each detected Occurrence
      public static List<Occurrence> TotalOccurrences = new ArrayList<>();

      //constructor
      public AvailabilityTacticParser(InputStream input) {
          this.inputReader = new InputStreamReader(input);
          ReInit(this.inputReader);
          try {
            ExecutionTrace();
            CorrectSyntax = true;
            } catch (ParseException e){
              CorrectSyntax = false;
              }
        }
        
       
        private static void detectPingEchoTactic() {
        // Use a state machine approach for pattern matching
        State currentState = State.LOOKING_FOR_PING_CALL;
        String SenderEntity = null;
        String ReceiverEntity = null;
        String MonitorEntity = null;
        int startPosition = 0;
        int itStart = 0;
        
        List<CallRelationship> patternCalls = new ArrayList<>();
        List<CallRelationship> iterationCalls = new ArrayList<>();

        boolean monitor = false;
        boolean loop = false;
        
        for (int i = 0; i < callRelationships.size(); i++) {
            CallRelationship call = callRelationships.get(i);
            
            switch (currentState) {
                case LOOKING_FOR_PING_CALL:
                    // Step 1: recording caller and callee for future checking          
                    if(!call.isSelfCall()) {
                        SenderEntity = call.caller;
                        ReceiverEntity = call.callee;
                        startPosition = i;
                        patternCalls.clear();
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_OPTIONAL_NOTIFY_CALL;
                   }                      
                    break;
                    
                case LOOKING_FOR_OPTIONAL_NOTIFY_CALL:
                    // Step 2: Look for optional exception handling
                    if (call.caller.equals(SenderEntity) && !call.callee.equals(ReceiverEntity) && !call.isSelfCall()) {
                        MonitorEntity = call.callee;
                        monitor = true;
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_OPTIONAL_HANDLE_CALL;
                    } else {
                        // Optional block not found, searching for the last echo call
                        i--;
                        currentState = State.LOOKING_FOR_ECHO_CALL;
                    }
                    break;
                    
                case LOOKING_FOR_OPTIONAL_HANDLE_CALL:
                    // Step 3: Look for corresponding caller-callee relationship
                    if (call.caller.equals(MonitorEntity) && call.isSelfCall()) {
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_ECHO_CALL;
                    }  else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_PING_CALL;
                    }
                    break;
                    
                case LOOKING_FOR_ECHO_CALL:
                    // Step 4: Look for last potential method call in a single iteration
                    if (call.caller.equals(ReceiverEntity) && call.callee.equals(SenderEntity)) {
                         patternCalls.add(call);
                         if ( i+1 >= callRelationships.size()) {
                           i--;
                           currentState = State.PATTERN_FOUND;
                            } else {
                              currentState = State.LOOKING_FOR_ITERATION_PING_CALL;
                              }               
                     } else {
                     // Pattern broken, restart from next position after first match
                     	i = startPosition;
                        currentState = State.LOOKING_FOR_PING_CALL;                           
                      }
                  break;

               case LOOKING_FOR_ITERATION_PING_CALL:
                 //checking if other iterations exist starting from the ping call
                 if(call.caller.equals(SenderEntity) && call.callee.equals(ReceiverEntity)) {
                     loop = true;
                     itStart = i-1;
                     iterationCalls.clear();
                     iterationCalls.add(call);
                     currentState = State.LOOKING_FOR_ITERATION_OPTIONAL_NOTIFY_CALL; 
                    } else {
                       i = i-2;
                       currentState = State.PATTERN_FOUND;
                     }
                 break;

               case LOOKING_FOR_ITERATION_OPTIONAL_NOTIFY_CALL:
                 //checking if this iteration had an exception block
                 if(!MonitorEntity.equals("null")) {
                     if(call.caller.equals(SenderEntity) && call.callee.equals(MonitorEntity)) {
                     iterationCalls.add(call);
                     currentState = State.LOOKING_FOR_ITERATION_OPTIONAL_HANDLE_CALL;
                       } else {
                          i--;
                          currentState = State.LOOKING_FOR_ITERATION_ECHO_CALL;
                       }
                   } else {
                     if(call.caller.equals(SenderEntity) && !call.isSelfCall() && !call.callee.equals(ReceiverEntity)) {
                       MonitorEntity = call.callee;
                       monitor = true;
                       iterationCalls.add(call);
                       currentState = State.LOOKING_FOR_ITERATION_OPTIONAL_HANDLE_CALL; 
                     } else {
                        i--;
                        currentState = State.LOOKING_FOR_ITERATION_ECHO_CALL;
                     }
                   }
                break;

               case LOOKING_FOR_ITERATION_OPTIONAL_HANDLE_CALL:
                  if(call.caller.equals(MonitorEntity) && call.isSelfCall()) {
                    iterationCalls.add(call);
                    currentState = State.LOOKING_FOR_ITERATION_ECHO_CALL;
                  } else {
                    MonitorEntity = "null";
                    currentState = State.PATTERN_FOUND;
                    i = itStart-1;
                  }              
               break;

               case LOOKING_FOR_ITERATION_ECHO_CALL:
               	if(call.caller.equals(ReceiverEntity) && call.callee.equals(SenderEntity)) {
               	  iterationCalls.add(call);
               	  patternCalls.addAll(iterationCalls);
                  currentState = State.LOOKING_FOR_ITERATION_PING_CALL;
               	  } else {
               	    currentState = State.PATTERN_FOUND;
               	    i = itStart-1;
               	    }
               break;

              case PATTERN_FOUND:
               	if(monitor) {
               	  TotalOccurrences.add(new Occurrence(SenderEntity, ReceiverEntity, MonitorEntity, startPosition, patternCalls));
               	   } else {
               	     TotalOccurrences.add(new Occurrence(SenderEntity, ReceiverEntity, startPosition, patternCalls));               	     
               	      }
               	currentState = State.LOOKING_FOR_PING_CALL;
               	MonitorEntity = "null";
               	monitor = false;
               	loop = false;
               break;
            }

           if ( i+1 >= callRelationships.size() && loop) {
             i--;
             currentState = State.PATTERN_FOUND;
             }
        }
    }

		public void buildPrintedContent() {
    		// Iterate over the occurrences and add details to the string
    		for (int i = 0; i < TotalOccurrences.size(); i++) {
    		    StringBuilder contentBuilder = new StringBuilder();
        		Occurrence occ = TotalOccurrences.get(i);
        		contentBuilder.append("Occurrence ").append(i + 1).append(":\n\n");
        	contentBuilder.append("PingSender Entity: ").append(occ.SenderEntity).append("\n");
        	contentBuilder.append("FaultMonitor Entity: ").append(occ.MonitorEntity).append("\n");
        	contentBuilder.append("PingReceiver Entity: ").append(occ.ReceiverEntity).append("\n");

        	int line = occ.startPosition;
        	contentBuilder.append("\nStarting line ").append(++line).append("\n\n");

        	for (CallRelationship call : occ.PatternCalls) {
            	contentBuilder.append(line).append(" CALLER:").append(call.caller).append(",METHOD:").append(call.method).append(",CALLEE:").append(call.callee).append(";\n");
           		 line++;
        	 }
        	 occurrenceStrings.add(contentBuilder.toString());
    		}
	}
    
  	 public void parse() {
        try {
            detectPingEchoTactic();
            if (!TotalOccurrences.isEmpty()) {
                tacticFound = true;
                buildPrintedContent();
            } else {
                tacticFound = false;
            }
        } catch (Exception e) {
            tacticFound = false;
        }
    }
    
}
PARSER_END(AvailabilityTacticParser)

SKIP : { "\n" | " " | "\t" | "\r" }

TOKEN : { < LITERAL : (["a"-"z", "A"-"Z", "0"-"9", "_"])+ > }

TOKEN : { < CALLER : "CALLER:" > }
TOKEN : { < CALLEE : "CALLEE:" > }
TOKEN : { < METHOD : "METHOD:" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOLON : ";" > }

void ExecutionTrace() : 
{
}
{
    (
        CallStatement()
    )*
    <EOF>
}

void CallStatement() : 
{
    Token caller, method, callee;
}
{
    <CALLER> caller = <LITERAL> <COMMA>
    <METHOD> method = <LITERAL> <COMMA>
    <CALLEE> callee = <LITERAL> <SEMICOLON>
    {
        //storing caller, method and callee of each line
        callRelationships.add(new CallRelationship(caller.image, callee.image, method.image));
    }
}