/* SecurityTacticParser.java */
/* Generated By:JavaCC: Do not edit this line. SecurityTacticParser.java */
import java.util.ArrayList;
import java.util.List;

public class SecurityTacticParser implements SecurityTacticParserConstants {

    // Simplified class to represent a caller-callee relationship
    private static class CallRelationship {
        String caller;
        String callee;
        String method;
        int position;

        public CallRelationship(String caller, String callee, String method, int position) {
            this.caller = caller;
            this.callee = callee;
            this.method = method;
            this.position = position;
        }


        public boolean isSelfCall() {
            return caller.equals(callee);
        }
    }

    // State machine for pattern matching
    private enum State {
        LOOKING_FOR_SELF_CALL_CLIENT,
        LOOKING_FOR_CLIENT_TO_AUTH_CALL,
        LOOKING_FOR_FIRST_AUTH_SELF_CALL,
        LOOKING_FOR_SECOND_AUTH_SELF_CALL,
        PATTERN_FOUND
    }

    // List to store all call relationships from the trace file
    private static List<CallRelationship> callRelationships = new ArrayList<>();

    // Flag to track if tactic was detected
    private static boolean tacticDetected = false;

    public static void main(String args[]) throws ParseException {
        try {
            SecurityTacticParser parser = new SecurityTacticParser(new java.io.FileInputStream("C:/Users/labde/OneDrive/Desktop/security.txt"));

            // Parse the trace file and collect all call relationships
            parser.ExecutionTrace();

            // Search for the security tactic pattern using state machine
            detectAuthenticationTactic();

            if (tacticDetected) {
                System.out.println("Authentication Tactic Detected!");
            } else {
                System.out.println("No Authentication Tactic Found.");
            }

        }
        catch (Exception e) {
          System.out.println("Parsing failed.");
          e.printStackTrace();
          }
    }

    private static void detectAuthenticationTactic() {
        // Use a state machine approach for pattern matching
        State currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
        String clientEntity = null;
        String authEntity = null;
        int startPosition = 0;

        List<CallRelationship> patternCalls = new ArrayList<>();

        for (int i = 0; i < callRelationships.size(); i++) {
            CallRelationship call = callRelationships.get(i);

            switch (currentState) {
                case LOOKING_FOR_SELF_CALL_CLIENT:
                    // Step 1: Look for a self-call (potential Client)
                    if (call.isSelfCall()) {
                        clientEntity = call.caller;
                        startPosition = i;
                        patternCalls.clear();
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_CLIENT_TO_AUTH_CALL;
                    }
                    break;

                case LOOKING_FOR_CLIENT_TO_AUTH_CALL:
                    // Step 2: Look for Client calling another entity (potential Auth)
                    if (call.caller.equals(clientEntity) && !call.isSelfCall()) {
                        authEntity = call.callee;
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_FIRST_AUTH_SELF_CALL;
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;

                case LOOKING_FOR_FIRST_AUTH_SELF_CALL:
                    // Step 3: Look for first Auth self-call
                    if (call.caller.equals(authEntity) && call.isSelfCall()) {
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_SECOND_AUTH_SELF_CALL;
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;

                case LOOKING_FOR_SECOND_AUTH_SELF_CALL:
                    // Step 4: Look for second Auth self-call
                    if (call.caller.equals(authEntity) && call.isSelfCall()) {
                        patternCalls.add(call);
                        currentState = State.PATTERN_FOUND;

                        // Pattern found!
                        tacticDetected = true;
                        System.out.println("Client entity: " + clientEntity);
                        System.out.println("Authenticator entity: " + authEntity);
                       return; // Exit after finding the first occurrence
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;
            }
        }
    }

  static final public void ExecutionTrace() throws ParseException {int position = 1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALLER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      CallStatement(position);
position++;
    }
    jj_consume_token(0);
}

  static final public void CallStatement(int position) throws ParseException {Token caller, method, callee;
    jj_consume_token(CALLER);
    caller = jj_consume_token(LITERAL);
    jj_consume_token(COMMA);
    jj_consume_token(METHOD);
    method = jj_consume_token(LITERAL);
    jj_consume_token(COMMA);
    jj_consume_token(CALLEE);
    callee = jj_consume_token(LITERAL);
    jj_consume_token(SEMICOLON);
// Only store caller-callee relationship, ignore the method name
        callRelationships.add(new CallRelationship(caller.image, callee.image, method.image, position));
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SecurityTacticParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,};
	}

  /** Constructor with InputStream. */
  public SecurityTacticParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SecurityTacticParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SecurityTacticParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SecurityTacticParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SecurityTacticParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SecurityTacticParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SecurityTacticParser(SecurityTacticParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SecurityTacticParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[11];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 1; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 11; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
