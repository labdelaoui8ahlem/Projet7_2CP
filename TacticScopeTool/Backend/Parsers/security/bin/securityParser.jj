options {
  static = true;
}

PARSER_BEGIN(SecurityTacticParser)
import java.io.InputStreamReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.text.ParseException;

public class SecurityTacticParser {
  
  	private InputStreamReader inputReader; 
  	public boolean tacticFound;
  	public boolean CorrectSyntax;
  	public String resultOccurrences = "";

   //Call class that saves caller method and callee of each method
  	private static class CallRelationship {
        String caller;
        String callee;
        String method;
        
        public CallRelationship(String caller, String callee, String method) {
            this.caller = caller;
            this.callee = callee;
            this.method = method;
        }
        
        
        public boolean isSelfCall() {
            return caller.equals(callee);
        }
    }

    //Occurrence list that saves all entities, start and pattern of each occurrence of the tactic    
     public static class Occurrence {
          String ClientEntity;
          String AuthEntity;
          int startPosition;
          List<CallRelationship> PatternCalls;

          public Occurrence( String ClientEntity, String AuthEntity, int startPosition, List<CallRelationship> PatternCalls) {
               this.ClientEntity = ClientEntity;
               this.AuthEntity = AuthEntity;
               this.startPosition = startPosition;
               this.PatternCalls = new ArrayList<>(PatternCalls);
               
          }
     }

    
    // State machine for pattern matching
    private enum State {
        LOOKING_FOR_SELF_CALL_CLIENT,
        LOOKING_FOR_CLIENT_TO_AUTH_CALL,
        LOOKING_FOR_FIRST_AUTH_SELF_CALL,
        LOOKING_FOR_SECOND_AUTH_SELF_CALL,
        PATTERN_FOUND
    }
    
    
    // List to store all call relationships from the trace file
    private static List<CallRelationship> callRelationships = new ArrayList<>();

    //List to store the infos of each detected Occurrence
      public static List<Occurrence> TotalOccurrences = new ArrayList<>();

      //constructor
      public SecurityTacticParser(InputStream input) {
          this.inputReader = new InputStreamReader(input);
          ReInit(this.inputReader);
          try {
            ExecutionTrace();
            CorrectSyntax = true;
            } catch (ParseException e){
              CorrectSyntax = false;
              }
        }
        
      private static void detectAuthenticationTactic() {
        // Use a state machine approach for pattern matching
        State currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
        String clientEntity = null;
        String authEntity = null;
        int startPosition = 0;
        
        List<CallRelationship> patternCalls = new ArrayList<>();
        
        for (int i = 0; i < callRelationships.size(); i++) {
            CallRelationship call = callRelationships.get(i);
            
            switch (currentState) {
                case LOOKING_FOR_SELF_CALL_CLIENT:
                    // Step 1: Look for a self-call (potential Client)
                    if (call.isSelfCall()) {
                        clientEntity = call.caller;
                        startPosition = i;
                        patternCalls.clear();
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_CLIENT_TO_AUTH_CALL;                        
                    }
                    break;
                    
                case LOOKING_FOR_CLIENT_TO_AUTH_CALL:
                    // Step 2: Look for Client calling another entity (potential Auth)
                    if (call.caller.equals(clientEntity) && !call.isSelfCall()) {
                        authEntity = call.callee;
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_FIRST_AUTH_SELF_CALL;
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;
                    
                case LOOKING_FOR_FIRST_AUTH_SELF_CALL:
                    // Step 3: Look for first Auth self-call
                    if (call.caller.equals(authEntity) && call.isSelfCall()) {
                        patternCalls.add(call);
                        currentState = State.LOOKING_FOR_SECOND_AUTH_SELF_CALL;
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;
                    
                case LOOKING_FOR_SECOND_AUTH_SELF_CALL:
                    // Step 4: Look for second Auth self-call
                    if (call.caller.equals(authEntity) && call.isSelfCall()) {
                        patternCalls.add(call);
                        currentState = State.PATTERN_FOUND;
                        i--;
                        
                    } else {
                        // Pattern broken, restart from next position after initial match
                        i = startPosition;
                        currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                    }
                    break;

                 case PATTERN_FOUND:
                    //saving found Occurrence for further processing
                    TotalOccurrences.add(new Occurrence(clientEntity, authEntity, startPosition, patternCalls));
                    currentState = State.LOOKING_FOR_SELF_CALL_CLIENT;
                 break;
                    
              }
          }
       }
                

		 public void buildPrintedContent() {
    		StringBuilder contentBuilder = new StringBuilder();
    
    		// Add number of occurrences
    		contentBuilder.append("Tactic Detected ").append(TotalOccurrences.size()).append(" times\n");

    		// Iterate over the occurrences and add details to the string
    		for (int i = 0; i < TotalOccurrences.size(); i++) {
        		Occurrence occ = TotalOccurrences.get(i);
        		contentBuilder.append("\nOccurrence ").append(i + 1).append(":\n");
        	contentBuilder.append("Client Entity: ").append(occ.ClientEntity).append("\n");
        	contentBuilder.append("Authenticator Entity: ").append(occ.AuthEntity).append("\n");

        	int line = occ.startPosition;
        	contentBuilder.append("Tactic started at line: ").append(++line).append("\n\n");

        	for (CallRelationship call : occ.PatternCalls) {
            	contentBuilder.append(line).append(" CALLER:").append(call.caller).append(",METHOD:").append(call.method).append(",CALLEE:").append(call.callee).append(";\n");
           		 line++;
        	 }
    		}
    	 resultOccurrences = contentBuilder.toString();
	   }
	   
    
  	 public void parse() {
        try {
            detectAuthenticationTactic();
            if (!TotalOccurrences.isEmpty()) {
                tacticFound = true;
                buildPrintedContent();
            } else {
                tacticFound = false;
            }
        } catch (Exception e) {
            tacticFound = false;
        }
    }
    
}
PARSER_END(SecurityTacticParser)

SKIP : { "\n" | " " | "\t" | "\r" }

TOKEN : { < LITERAL : (["a"-"z", "A"-"Z", "0"-"9", "_"])+ > }

TOKEN : { < CALLER : "CALLER:" > }
TOKEN : { < CALLEE : "CALLEE:" > }
TOKEN : { < METHOD : "METHOD:" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SEMICOLON : ";" > }

void ExecutionTrace() : 
{
}
{
    (
        CallStatement()
    )*
    <EOF>
}

void CallStatement() : 
{
    Token caller, method, callee;
}
{
    <CALLER> caller = <LITERAL> <COMMA>
    <METHOD> method = <LITERAL> <COMMA>
    <CALLEE> callee = <LITERAL> <SEMICOLON>
    {
        //storing caller, method and callee of each line
        callRelationships.add(new CallRelationship(caller.image, callee.image, method.image));
    }
}